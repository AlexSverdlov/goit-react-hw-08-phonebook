{"version":3,"sources":["views/Homeview.js","views/LoginView.js","redux/auth/auth-action.js","redux/auth/auth-operations.js","views/RegisterView.js","conponents/Navigation.js","conponents/Authnav.js","conponents/UserMenu.js","conponents/AppBar.js","conponents/Container/Container.js","App.js","redux/actions.js","redux/reducer.js","redux/auth/auth-reduser.js","redux/store.js","index.js"],"names":["Homeview","LoginView","state","email","password","handleChange","target","name","value","setState","handleSubmit","e","preventDefault","this","onSubmit","autoComplete","type","onChange","Component","registerRequest","createAction","registerSuccess","registerError","loginRequest","loginSuccess","loginError","logoutRequest","logoutSuccess","logoutError","getCurrentUserRequest","getCurrentUserSuccess","getCurrentUserError","axios","defaults","baseURL","register","credential","dispatch","a","authActions","responce","post","data","error","login","logout","getCurrentUser","getState","RegisterView","props","onRegister","mapDispatchToProps","authOperations","connect","Navigation","className","exact","to","activeClassName","AuthNav","UserMenu","onLogout","onClick","Appbar","isAutentificated","Container","children","App","path","component","fetchContactSuccess","addContactSuccess","delContactSuccess","filterContact","itemsReduсer","createReducer","action","payload","filter","item","id","filterReduсer","_","contactsReduсer","combineReducers","items","user","token","authReduser","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","store","next","console","log","configureStore","reducer","auth","authReduсer","contacts","persistor","persistStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9f630471.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Homeview = () => {\r\n  return <h1>Телефонная книга</h1>;\r\n};\r\nexport default Homeview;\r\n","import React, { Component } from 'react';\r\n\r\nclass LoginView extends Component {\r\n  state = {\r\n    email: '',\r\n    password: '',\r\n  };\r\n  handleChange = ({ target: { name, value } }) => {\r\n    this.setState({ [name]: value });\r\n  };\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    this.setState({ name: '', email: '', password: '' });\r\n  };\r\n\r\n  render() {\r\n    const { email, password } = this.state;\r\n    return (\r\n      <div>\r\n        <h1>Страница логина</h1>\r\n        <form onSubmit={this.handleSubmit} autoComplete=\"off\">\r\n          <label>\r\n            Почта\r\n            <input\r\n              type=\"email\"\r\n              name=\"email\"\r\n              value={email}\r\n              onChange={this.handleChange}\r\n            />\r\n          </label>\r\n          <label>\r\n            Пароль\r\n            <input\r\n              type=\"password\"\r\n              name=\"password\"\r\n              value={password}\r\n              onChange={this.handleChange}\r\n            />\r\n          </label>\r\n          <button type=\"button\">Войти</button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LoginView;\r\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\nconst registerRequest = createAction('auth/registerRequest');\r\nconst registerSuccess = createAction('auth/registerSuccess');\r\nconst registerError = createAction('auth/registerError');\r\n\r\nconst loginRequest = createAction('auth/loginRequest');\r\nconst loginSuccess = createAction('auth/loginSuccess');\r\nconst loginError = createAction('auth/loginError');\r\n\r\nconst logoutRequest = createAction('auth/logoutRequest');\r\nconst logoutSuccess = createAction('auth/logoutSuccess');\r\nconst logoutError = createAction('auth/logoutError');\r\n\r\nconst getCurrentUserRequest = createAction('auth/getCurrentUserRequest');\r\nconst getCurrentUserSuccess = createAction('auth/getCurrentUserSuccess');\r\nconst getCurrentUserError = createAction('auth/getCurrentUserError');\r\n\r\nexport default {\r\n  registerRequest,\r\n  registerSuccess,\r\n  registerError,\r\n  loginRequest,\r\n  loginSuccess,\r\n  loginError,\r\n  logoutRequest,\r\n  logoutSuccess,\r\n  logoutError,\r\n  getCurrentUserRequest,\r\n  getCurrentUserSuccess,\r\n  getCurrentUserError,\r\n};\r\n","import axios from 'axios';\r\nimport authActions from './auth-action';\r\n\r\naxios.defaults.baseURL = 'https://connections-api.herokuapp.com';\r\n\r\nconst register = credential => async dispatch => {\r\n  dispatch(authActions.registerRequest());\r\n  try {\r\n    const responce = axios.post('/users/signup', credential);\r\n    dispatch(authActions.registerSuccess(responce.data));\r\n  } catch (error) {\r\n    dispatch(authActions.registerError(error));\r\n  }\r\n};\r\nconst login = credential => dispatch => {};\r\nconst logout = () => dispatch => {};\r\nconst getCurrentUser = () => (dispatch, getState) => {};\r\n\r\nexport default { register, login, logout, getCurrentUser };\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport authOperations from '../redux/auth/auth-operations';\r\n\r\nclass RegisterView extends Component {\r\n  state = {\r\n    name: '',\r\n    email: '',\r\n    password: '',\r\n  };\r\n  handleChange = ({ target: { name, value } }) => {\r\n    this.setState({ [name]: value });\r\n  };\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    this.props.onRegister(this.state);\r\n    this.setState({ name: '', email: '', password: '' });\r\n  };\r\n\r\n  render() {\r\n    const { name, email, password } = this.state;\r\n    return (\r\n      <div>\r\n        <h1>Страница регистрации</h1>\r\n        <form onSubmit={this.handleSubmit} autoComplete=\"off\">\r\n          <label>\r\n            Имя\r\n            <input\r\n              type=\"text\"\r\n              name=\"name\"\r\n              value={name}\r\n              onChange={this.handleChange}\r\n            />\r\n          </label>\r\n          <label>\r\n            Почта\r\n            <input\r\n              type=\"email\"\r\n              name=\"email\"\r\n              value={email}\r\n              onChange={this.handleChange}\r\n            />\r\n          </label>\r\n          <label>\r\n            Пароль\r\n            <input\r\n              type=\"password\"\r\n              name=\"password\"\r\n              value={password}\r\n              onChange={this.handleChange}\r\n            />\r\n          </label>\r\n          <button type=\"submit\">Регистрация</button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n  onRegister: authOperations.register,\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(RegisterView);\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst Navigation = () => {\r\n  return (\r\n    <ul className=\"navigation\">\r\n      <li>\r\n        <NavLink\r\n          exact\r\n          to=\"/\"\r\n          className=\"NavLink\"\r\n          activeClassName=\"NavLink-active\"\r\n        >\r\n          Home\r\n        </NavLink>\r\n      </li>\r\n      <li>\r\n        <NavLink\r\n          exact\r\n          to=\"/contacts\"\r\n          className=\"NavLink\"\r\n          activeClassName=\"NavLink-active\"\r\n        >\r\n          Контакты\r\n        </NavLink>\r\n      </li>\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default Navigation;\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst AuthNav = () => (\r\n  <div>\r\n    <NavLink\r\n      exact\r\n      to=\"/register\"\r\n      className=\"NavLink\"\r\n      activeClassName=\"NavLink-active\"\r\n    >\r\n      Регистрация\r\n    </NavLink>\r\n    <NavLink\r\n      exact\r\n      to=\"/login\"\r\n      className=\"NavLink\"\r\n      activeClassName=\"NavLink-active\"\r\n    >\r\n      Логин\r\n    </NavLink>\r\n  </div>\r\n);\r\n\r\nexport default AuthNav;\r\n","import React from 'react';\r\n\r\nconst UserMenu = ({ email, onLogout }) => (\r\n  <div>\r\n    <span>{email}</span>\r\n    <button type=\"button\" onClick={onLogout}>\r\n      Logout\r\n    </button>\r\n  </div>\r\n);\r\n\r\nexport default UserMenu;\r\n","import React from 'react';\r\nimport Navigation from './Navigation';\r\nimport AuthNav from './Authnav';\r\nimport UserMenu from './UserMenu';\r\n\r\n// {isAutentificated}\r\nconst Appbar = ({ isAutentificated }) => {\r\n  return (\r\n    <header>\r\n      <Navigation />\r\n      {isAutentificated ? <UserMenu /> : <AuthNav />}\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Appbar;\r\n","import React from 'react';\r\n\r\nconst Container = ({ children }) => (\r\n  <section>\r\n    {children}\r\n    <hr />\r\n  </section>\r\n);\r\n\r\nexport default Container;\r\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\n// import { connect } from 'react-redux';\n// import ContactForm from './conponents/ContactForm';\n// import Filter from './conponents/Filter';\n// import ContactList from './conponents/ContactList.container';\n// import { fetchContact } from './redux/operations';\nimport Homeview from './views/Homeview';\nimport LoginView from './views/LoginView';\nimport RegisterView from './views/RegisterView';\nimport Appbar from './conponents/AppBar';\nimport Container from './conponents/Container/Container';\nimport './App.css';\n\nconst App = () => (\n  <Container>\n    <Appbar />\n    <Switch>\n      <Route exact path=\"/\" component={Homeview} />\n      <Route exact path=\"/login\" component={LoginView} />\n      <Route exact path=\"/register\" component={RegisterView} />\n    </Switch>\n  </Container>\n);\n\n// class App extends React.Component {\n//   componentDidMount() {\n//     this.props.fetchContact();\n//   }\n\n//   render() {\n//     return (\n//       <div className=\"App\" style={{ textAlign: 'left', margin: '20px' }}>\n//         <h1>Phonebook</h1>\n//         <ContactForm />\n//         <h2>Contact</h2>\n//         <Filter />\n//         <ContactList />\n//       </div>\n//     );\n//   }\n// }\n\n// const mapDispatchToProps = dispatch => ({\n//   fetchContact: () => dispatch(fetchContact()),\n// });\n\n// export default connect(null, mapDispatchToProps)(App);\nexport default App;\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const fetchContactRequest = createAction('APP/FETCH_CONTACT_REQUEST');\r\nexport const fetchContactSuccess = createAction('APP/FETCH_CONTACT_SUCCESS');\r\nexport const fetchContactError = createAction('APP/FETCH_CONTACT_ERROR');\r\n\r\nexport const addContactRequest = createAction('APP/ADD_CONTACT_REQUEST');\r\nexport const addContactSuccess = createAction('APP/ADD_CONTACT_SUCCESS');\r\nexport const addContactError = createAction('APP/ADD_CONTACT_ERROR');\r\n\r\nexport const delContactRequest = createAction('APP/DEL_CONTACT_REQUEST');\r\nexport const delContactSuccess = createAction('APP/DEL_CONTACT_SUCCESS');\r\nexport const delContactError = createAction('APP/DEL_CONTACT_ERROR');\r\n\r\nexport const filterContact = createAction('APP/FILTER_CONTACT');\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport {\r\n  fetchContactSuccess,\r\n  addContactSuccess,\r\n  delContactSuccess,\r\n  filterContact,\r\n} from './actions';\r\n\r\nconst itemsReduсer = createReducer([], {\r\n  [fetchContactSuccess]: (state, action) => action.payload,\r\n  [addContactSuccess]: (state, action) => [action.payload, ...state],\r\n  [delContactSuccess]: (state, action) =>\r\n    state.filter(item => item.id !== action.payload),\r\n});\r\n\r\nconst filterReduсer = createReducer('', {\r\n  [filterContact]: (_, action) => action.payload,\r\n});\r\n\r\nconst contactsReduсer = combineReducers({\r\n  items: itemsReduсer,\r\n  filter: filterReduсer,\r\n});\r\n\r\nexport default contactsReduсer;\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport authActions from './auth-action';\r\n\r\nconst initialUserState = { name: null, email: null };\r\n\r\nconst user = createReducer(initialUserState, {\r\n  [authActions.registerSuccess]: (_, { payload }) => payload.user,\r\n});\r\n\r\nconst token = createReducer(null, {\r\n  [authActions.registerSuccess]: (_, { payload }) => payload.token,\r\n});\r\nconst error = createReducer(null, {});\r\n\r\nconst authReduser = combineReducers({\r\n  user,\r\n  token,\r\n  error,\r\n});\r\n\r\nexport default authReduser;\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport {\r\n  persistStore,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\n// import storage from 'redux-persist/lib/storage';\r\nimport contactsReduсer from './reducer';\r\nimport authReduсer from './auth/auth-reduser';\r\n\r\n// const initialState = {\r\n//   contacts: {\r\n//     items: [\r\n//       { id: 1, name: 'ffff', number: '1111' },\r\n//       { id: 2, name: 'fffd', number: '2222' },\r\n//     ],\r\n//     filter: 'ff',\r\n//   },\r\n// };\r\n\r\n// const itemsPersistConfig = {\r\n//   key: 'items',\r\n//   storage,\r\n//   blacklist: ['filter'],\r\n// };\r\n\r\nconst myMiddlware = store => next => action => {\r\n  console.log('dasdadads', action);\r\n  next(action);\r\n};\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  myMiddlware,\r\n];\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    auth: authReduсer,\r\n    contacts: contactsReduсer,\r\n  },\r\n  middleware,\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nexport default { store, persistor };\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport store from './redux/store';\nimport { BrowserRouter } from 'react-router-dom';\n// import { PersistGate } from 'redux-persist/integration/react';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      {/* <PersistGate loading={null} persistor={store.persistor}> */}\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}